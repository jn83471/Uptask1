{"version":3,"file":"tree.cjs","sources":["../../../src/components/tree.tsx"],"sourcesContent":["import { For } from 'solid-js'\nimport { useStyles } from '../styles/use-styles'\n\nexport function JsonTree(props: { value: any }) {\n  return <JsonValue isRoot value={props.value} />\n}\n\nfunction JsonValue(props: {\n  value: any\n  keyName?: string\n  isRoot?: boolean\n  isLastKey?: boolean\n}) {\n  const { value, keyName, isRoot = false, isLastKey } = props\n  const styles = useStyles()\n\n  return (\n    <span class={styles().tree.valueContainer(isRoot)}>\n      {(() => {\n        if (typeof value === 'string') {\n          return (\n            <span>\n              {keyName && (\n                <span class={styles().tree.valueKey}>\n                  &quot;{keyName}&quot;:{' '}\n                </span>\n              )}\n              <span class={styles().tree.valueString}>&quot;{value}&quot;</span>\n            </span>\n          )\n        }\n        if (typeof value === 'number') {\n          return (\n            <span>\n              {keyName && (\n                <span class={styles().tree.valueKey}>\n                  &quot;{keyName}&quot;:{' '}\n                </span>\n              )}\n              <span class={styles().tree.valueNumber}>{value}</span>\n            </span>\n          )\n        }\n        if (typeof value === 'boolean') {\n          return (\n            <span>\n              {keyName && (\n                <span class={styles().tree.valueKey}>\n                  &quot;{keyName}&quot;:{' '}\n                </span>\n              )}\n              <span class={styles().tree.valueBoolean}>{String(value)}</span>\n            </span>\n          )\n        }\n        if (value === null) {\n          return (\n            <span>\n              {keyName && (\n                <span class={styles().tree.valueKey}>\n                  &quot;{keyName}&quot;:{' '}\n                </span>\n              )}\n              <span class={styles().tree.valueNull}>null</span>\n            </span>\n          )\n        }\n        if (value === undefined) {\n          return (\n            <span>\n              {keyName && (\n                <span class={styles().tree.valueKey}>\n                  &quot;{keyName}&quot;:{' '}\n                </span>\n              )}\n              <span class={styles().tree.valueNull}>undefined</span>\n            </span>\n          )\n        }\n        if (Array.isArray(value)) {\n          return (\n            <span>\n              {keyName && (\n                <span class={styles().tree.valueKey}>\n                  &quot;{keyName}&quot;:{' '}\n                </span>\n              )}\n              <span class={styles().tree.valueBraces}>[</span>\n              <For each={value}>\n                {(item, i) => {\n                  const isLastKey = i() === value.length - 1\n                  return (\n                    <>\n                      <JsonValue value={item} isLastKey={isLastKey} />\n                    </>\n                  )\n                }}\n              </For>\n              <span class={styles().tree.valueBraces}>]</span>\n            </span>\n          )\n        }\n        if (typeof value === 'object') {\n          const keys = Object.keys(value)\n          const lastKeyName = keys[keys.length - 1]\n          return (\n            <span>\n              {keyName && (\n                <span class={styles().tree.valueKey}>\n                  &quot;{keyName}&quot;:{' '}\n                </span>\n              )}\n              <span class={styles().tree.valueBraces}>{'{'}</span>\n              <For each={keys}>\n                {(k) => (\n                  <>\n                    <JsonValue\n                      value={value[k]}\n                      keyName={k}\n                      isLastKey={lastKeyName === k}\n                    />\n                  </>\n                )}\n              </For>\n              <span class={styles().tree.valueBraces}>{'}'}</span>\n            </span>\n          )\n        }\n        return <span />\n      })()}\n      {isLastKey || isRoot ? '' : <span>,</span>}\n    </span>\n  )\n}\n"],"names":["JsonTree","props","_$createComponent","JsonValue","isRoot","value","keyName","isLastKey","styles","useStyles","_el$","_tmpl$","_$insert","_el$2","_tmpl$2","_el$3","firstChild","_el$4","_el$6","nextSibling","_el$7","_tmpl$3","_el$8","_el$10","_$effect","_$className","tree","valueKey","valueString","_el$11","_tmpl$4","_el$12","_el$13","_el$14","_el$16","valueNumber","_el$17","_el$18","_el$19","_el$20","_el$22","String","valueBoolean","_el$23","_tmpl$5","_el$24","_el$25","_el$26","_el$28","valueNull","undefined","_el$29","_tmpl$6","_el$30","_el$31","_el$32","_el$34","Array","isArray","_el$35","_tmpl$7","_el$36","_el$37","_el$38","_el$39","_el$41","For","each","children","item","i","length","_p$","_v$","valueBraces","_v$2","e","t","keys","Object","lastKeyName","_el$42","_tmpl$8","_el$43","_el$44","_el$45","_el$46","_el$48","k","_v$3","_v$4","_tmpl$9","valueContainer"],"mappings":"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"}